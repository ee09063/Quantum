class Board
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	public pieces : set of Piece := { };
operations
	public Board : (set of Piece) ==> Board
	Board(initialPieces) == (
		pieces := initialPieces;
		return self;
	);
	
	public movePiece: Piece * nat * nat ==> bool
		movePiece(p, xf, yf) == 
		(
			if checkForPiece(xf,yf) then return false
			elseif p.getType() = "Square" then return moveSquarePiece(p, xf, yf)
			elseif p.getType() = "Circle" then return moveCirclePiece(p, xf, yf);
			return false;
			-- elseif p.getType() = "Cross" then return moveCrossPiece(p, xf, yf)
		);
		
	public moveSquarePiece : Piece * nat * nat ==> bool
		moveSquarePiece(p,xf,yf) == 
		(
			dcl dx : nat := abs(p.getX()-xf);
			dcl dy : nat := abs(p.getY()-yf);
			
			if dx = 0 then
			(
				if dy <= p.getHeight() then
				(
					p.setX(xf);
					p.setY(yf);
					return true;
				)
			)
			elseif dy = 0 then
			(
				if dx <= p.getHeight() then
				(
					p.setX(xf);
					p.setY(yf);
					return true;
				)
			)
			else return false; -- not ortogonal movement
			return false;
		);
		
	public moveCirclePiece : Piece * nat * nat ==> bool
		moveCirclePiece(p,xf,yf) == 
		(
			dcl dx : nat := abs(p.getX()-xf);
			dcl dy : nat := abs(p.getY()-yf);
			
			if dx = 0 or dy = 0 then return false; -- ortogonal movement
			
			if dx <> dy then return false; -- not diagonal movement
			
			if dx <= p.getHeight() then
			(
				p.setX(xf);
				p.setY(yf);
				return true;
			)
			else return false;
		);
		
	/*public moveCrossPiece : Piece * nat * nat ==> ()
		moveCrossPiece(p,xf,yf) == 
		(
		
		);*/
	
	public checkForPiece : nat * nat ==> bool
		checkForPiece(x,y) == 
		(
			for all p in set pieces do
				if p.getX() = x and p.getY() = y then return true;
			return false;
		);
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Board