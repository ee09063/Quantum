class GameTest is subclass of Test
	operations
	
		private testCreatePiece: () ==> ()
			testCreatePiece() == 
			(
				dcl p: Piece := new Piece("White", "Square", 0, 0);
				
				assertEqual("White",p.getColor());
				assertEqual("Square",p.getType());
				assertEqual(0,p.getX());
				assertEqual(0,p.getY());
				assertEqual(1,p.getHeight());
			);
			
		private testMovementOne: () ==> ()
			testMovementOne() == 
			(
				dcl p1 : Piece := new Piece("White", "Square", 0, 0);
				dcl p2 : Piece := new Piece("Black", "Circle", 1, 1);
				dcl p3 : Piece := new Piece("White", "Cross", 3, 3);
				dcl sp : set of Piece := {p1,p2,p3};
				dcl board : Board := new Board(sp);
				
				-- Retrieves a piece
				assertEqual(board.getPiece(0,0), mk_(p1,true));
				assertEqual(board.getPiece(2,2).#2, false);
				-- Moving a piece that does not exist
				--assertEqual(false, board.move(5, 5, 1, 1));
				-- Moving a Square Piece ortogonally
				assertEqual(true, board.move(0, 0, 0, 1));
				-- Checking the coordinates of the piece
				assertEqual(0, p1.getX());
				assertEqual(1, p1.getY());
				
				-- Trying to move a Circle Piece ortogonally
				--assertEqual(false, board.move(1, 1, 1, 0));
				-- Moving a Circle Piece
				assertEqual(true, board.move(1, 1, 2, 2));
				-- Cheking the coordinates of the piece
				assertEqual(2, p2.getX());
				assertEqual(2, p2.getY());
				-- Turn p1 into a height 6 tower
				p2.setHeight(6);
				--assertEqual(false, board.move(2, 2, 1, 1));
				
				-- Trying to move a Cross Piece not Diagonally or Ortogonally
				--assertEqual(false, board.move(3, 3, 4, 5));
				-- Trying to move a Cross Piece diagonally outside of range
				--assertEqual(false, board.move(3, 3, 5, 5));
				-- Trying to move a Cross Piece Diagonally
				assertEqual(true, board.move(3, 3, 4, 4));
			);
			
			private testCapture : () ==> ()
				testCapture() == 
				(
					dcl p1 : Piece := new Piece("White", "Square", 0, 0);
					dcl p2 : Piece := new Piece("Black", "Circle", 0, 1);
					
					dcl p3 : Piece := new Piece("White", "Circle", 1, 0);
					dcl p4 : Piece := new Piece("Black", "Square", 2, 1);
					
					dcl p5 : Piece := new Piece("White", "Cross", 3, 3);
					dcl p6 : Piece := new Piece("Black", "Square", 4, 4);
					
					dcl sp : set of Piece := {p1,p2,p3,p4,p5,p6};
					dcl board : Board := new Board(sp);
					
					-- Use p1 to try ad capture a piece with the same color, p3
					--assertEqual(false, board.move(0,0,1,0));
					
					-- Use p1 to capture p2
					assertEqual(true, board.move(0, 0, 0, 1));
					-- Check p1 properties
					assertEqual(0,p1.getX());
					assertEqual(1,p1.getY());
					assertEqual(2,p1.getHeight());
					-- Check if p2 was removed
					assertEqual({p1,p3,p4,p5,p6}, board.pieces);
					
					-- Use p3 to capture p4
					assertEqual(true, board.move(1, 0, 2, 1));
					-- Check p3 properties
					assertEqual(2,p3.getX());
					assertEqual(1,p3.getY());
					assertEqual(2,p3.getHeight());
					-- Check if p4 was removed
					assertEqual({p1,p3,p5,p6}, board.pieces);
					
					-- Use p5 to capture p6
					assertEqual(true, board.move(3, 3, 4, 4));
					-- Check p4 properties
					assertEqual(4,p5.getX());
					assertEqual(4,p5.getY());
					assertEqual(2,p5.getHeight());
					-- Check if p6 was removed
					assertEqual({p1,p3,p5}, board.pieces);
				);
			
			private testTurn: () ==> ()
				testTurn() == 
				(
					dcl p1 : Piece := new Piece("White", "Square", 0, 0);
					dcl p2 : Piece := new Piece("Black", "Circle", 1, 1);
					dcl p3 : Piece := new Piece("White", "Cross", 3, 3);
					dcl sp : set of Piece := {p1,p2,p3};
					dcl board : Board := new Board(sp);
				
					assertEqual("White", board.turn);
					board.changeTurn();
					assertEqual("Black", board.turn);
					board.changeTurn();
					assertEqual("White", board.turn);
				);
			
			public static main: () ==> ()
				main() ==
				(
					new GameTest().testCreatePiece();
					new GameTest().testMovementOne();
					new GameTest().testCapture();
					new GameTest().testTurn();
				);
		
end GameTest